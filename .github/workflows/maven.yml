name: Java CI with Maven

env:
  # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases
  # in your browser and copy the full "upload_url" value including the {?name,label} part
  UPLOAD_URL: https://uploads.github.com/repos/MarginallyClever/Makelangelo-software/releases/54908875/assets{?name,label}
  RELEASE_ID: 54908875 # same as above (id can just be taken out the upload_url, it's used to find old releases)


on:
  push:
  pull_request:
      
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30 

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4.2.1
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'

    # from https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
    - name: Build and Test with Maven
      timeout-minutes: 30
      run: ./mvnw -B test -Djava.awt.headless=true

    - name: Package with Maven
      run: ./mvnw -B clean package -DskipTests

    - name: Check files 1
      run: ls -l src/main/package/

    - name: Prepare universal package
      shell: bash
      run: |
        mkdir -p target/universal-package &&
        cp src/main/package/*.bat target/universal-package/ &&
        cp src/main/package/start* target/universal-package/ &&
        cp src/main/package/thankyou.* target/universal-package/ &&
        cp CONTRIBUTING.md target/universal-package/ &&
        cp LICENSE target/universal-package/ &&
        cp README.md target/universal-package/ &&
        cp target/Makelangelo-*-with-dependencies.jar target/universal-package/ &&
        cd target/universal-package/ &&
        7z a -tzip Makelangelo.zip . &&
        mv Makelangelo.zip ../.. 
    - name: Prepare target/package for upload
      shell: bash
      run: |
        mkdir -p target/package &&
        cp src/main/package/*.bat target/package/ &&
        cp src/main/package/start* target/package/ &&
        cp src/main/package/thankyou.* target/package/ &&
        cp CONTRIBUTING.md target/package/ &&
        cp LICENSE target/package/ &&
        cp README.md target/package/ 
    - name: Check files 2a
      run: ls -l target/universal-package/

    - name: Check files 2b
      run: ls -l target/package/

    - name: Deploy universal release
      if: github.repository == 'MarginallyClever/Makelangelo-software' && github.ref == 'refs/heads/master'
      uses: WebFreak001/deploy-nightly@v3.1.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
        upload_url: ${{ env.UPLOAD_URL }}
        release_id: ${{ env.RELEASE_ID }}
        asset_path: Makelangelo.zip # path to archive to upload
        asset_name: Makelangelo-nightly-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
        asset_content_type: application/zip # required by GitHub API
        max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted

    - name: Upload artifact for package
      uses: actions/upload-artifact@v4.3.3
      with:
        name: jar
        retention-days: 1
        path: |
          src/main/package/jpackage*
          src/main/package/logo*
          LICENSE
          README
          target/package/*
    - name: Check files 3
      run: ls -l target/universal-package/

  # jvm glags 
  # jvm flags
  test-with-flags:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30

    strategy:
     matrix:
       jvm_flags:
         - "-ea" # Standard Flag: Assertions activated
         - "-Xmx2G" # Heap size flag: Maximal heap size of 2GB
         - "-XX:+PrintCompilation" # JIT Compilation flag, type print: all the methods compiled by the JIT
         - "-XX:+UseG1GC" # Garbage collector flag: Use the G1 GC
         - "-XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation" # Compilation/diagnostic flag: Compilation logs

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4.2.1
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Compile with Maven
        run: ./mvnw -B clean compile

      # Group for JVM flag execution
      - name: Start JVM Flag Test Group
        run: echo "::group::Running Tests with JVM Flag '${{ matrix.jvm_flags }}'"
        
      - name: List JaCoCo in Maven Cache
        run: find ~/.m2/repository/org/jacoco -name "org.jacoco.agent*.jar"
        
      - name: Run Tests with JVM Flag
        run: |
           echo "Running tests with JVM Flag: ${{ matrix.jvm_flags }}"
           sanitized_flag=$(echo "${{ matrix.jvm_flags }}" | sed 's/[^a-zA-Z0-9]/_/g')
           jacoco_exec_file="target/jacoco_${sanitized_flag}.exec"
           jacoco_agent_path="/home/runner/.m2/repository/org/jacoco/org.jacoco.agent/0.8.11/org.jacoco.agent-0.8.11-runtime.jar"
    
           if [ ! -f "$jacoco_agent_path" ]; then
             echo "JaCoCo agent not found at $jacoco_agent_path. Exiting."
             exit 1
           fi

           echo "JaCoCo agent found at $jacoco_agent_path"
           export MAVEN_OPTS="-javaagent:${jacoco_agent_path}=destfile=${jacoco_exec_file} ${{ matrix.jvm_flags }}"
           ./mvnw clean test -Djava.awt.headless=true


          
      - name: Generate JaCoCo Report
        run: |
         sanitized_flag=$(echo "${{ matrix.jvm_flags }}" | sed 's/[^a-zA-Z0-9]/_/g')
         jacoco_exec_file="target/jacoco_${sanitized_flag}.exec"
         ./mvnw jacoco:report -Djacoco.dataFile=${jacoco_exec_file} -Djacoco.outputDirectory=target/site/jacoco_${sanitized_flag}

      - name: Verify JaCoCo Report
        run: |
          if [ ! -f target/site/jacoco/jacoco.csv ]; then
            echo "JaCoCo report not found. Generating the report."
            ./mvnw jacoco:report
          else
             echo "JaCoCo report already exists. Skipping generation."
          fi
      - name: List JaCoCo Report Directory
        run: |
           echo "Checking contents of target/site/jacoco/"
           ls -l target/site/jacoco/

      
      - name: Delay Before Extracting Coverage
        run: sleep 5
      - name: Debug JaCoCo CSV
        run: |
         echo "Contents of jacoco.csv:"
         cat target/site/jacoco/jacoco.csv || echo "jacoco.csv not found"

         
      - name: Extract Coverage Percentage
        id: coverage
        run: |
          sanitized_flag=$(echo "${{ matrix.jvm_flags }}" | sed 's/[^a-zA-Z0-9]/_/g')
          report_dir="target/site/jacoco_${sanitized_flag}"
          if [ -f ${report_dir}/jacoco.csv ]; then
             missed=$(awk -F',' '{if(NR>1) sum+=$4} END {print sum}' ${report_dir}/jacoco.csv)
             covered=$(awk -F',' '{if(NR>1) sum+=$5} END {print sum}' ${report_dir}/jacoco.csv)

            if [ "$((missed + covered))" -gt 0 ]; then
              coverage=$((100 * covered / (missed + covered)))
              echo "Coverage percentage for JVM flag '${{ matrix.jvm_flags }}': ${coverage}%"
              echo "COVERAGE_${sanitized_flag}=${coverage}" >> $GITHUB_ENV
            else
             echo "No instructions found. Coverage percentage is set to 0%."
             echo "COVERAGE_${sanitized_flag}=0" >> $GITHUB_ENV
            fi
          else
            echo "JaCoCo report not found for flag '${{ matrix.jvm_flags }}'."
            echo "COVERAGE_${sanitized_flag}=N/A" >> $GITHUB_ENV
          fi
 

  package:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - uses: actions/download-artifact@v4.1.7
      with:
        name: jar
        
    - name: Check files 4
      run: ls -l target/package/

    - name: Build installation package
      shell: bash
      run: |
        set -x
        set -o pipefail
        APP_VERSION=$(ls -1 target/package/Makelangelo-*-with-dependencies.jar | sed "s/.*Makelangelo-\([^-]*\)-with-dependencies.jar/\1/") &&
        sed -i.bak "s/\(--app-version\).*/\1 $APP_VERSION/" src/main/package/jpackage.cfg &&
        jpackage "@src/main/package/jpackage.cfg" "@src/main/package/jpackage-${{matrix.os}}.cfg" --main-jar "Makelangelo-$APP_VERSION-with-dependencies.jar" &&
        ls &&
        BINARY=$(find . -maxdepth 1 -iname 'makelangelo*' | grep -E '(msi$|dmg$|deb$)' | sed "s,./,," | head -1) &&
        BINARY_NIGHTLY=$(echo $BINARY | sed 's/[Mm]akelangelo\(.*\)\.\(.*\)/\Makelangelo-nightly-$$.\2/') &&
        echo "BINARY=$BINARY" | tee -a $GITHUB_ENV &&
        echo "BINARY_NIGHTLY=$BINARY_NIGHTLY" | tee -a $GITHUB_ENV
    - name: Deploy installation release
#      if: github.repository == 'MarginallyClever/Makelangelo-software'
#      if: github.repository == 'MarginallyClever/Makelangelo-software' && github.ref == 'refs/heads/master'
      uses: WebFreak001/deploy-nightly@v3.1.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
        upload_url: ${{ env.UPLOAD_URL }}
        release_id: ${{ env.RELEASE_ID }}
        asset_path: ${{ env.BINARY }} # path to archive to upload
        asset_name: ${{ env.BINARY_NIGHTLY }} # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
        asset_content_type: application/zip # required by GitHub API
        max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted

    - name: Upload artifact for testing purpose
#      if: github.repository == 'MarginallyClever/Makelangelo-software' || github.ref != 'refs/heads/master'
      uses: actions/upload-artifact@v4.3.3
      with:
        name: ${{ env.BINARY }}
        retention-days: 2
        path: ${{ env.BINARY }}
