name: Java CI with Maven

env:
  UPLOAD_URL: https://uploads.github.com/repos/MarginallyClever/Makelangelo-software/releases/54908875/assets{?name,label}
  RELEASE_ID: 54908875

on:
  push:
  pull_request:

jobs:
  # Step 1: Build and Generate Report
  generate-report:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build and Test with Maven
        run: ./mvnw clean test jacoco:prepare-agent jacoco:report

      - name: Upload JaCoCo Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

  # Step 2: Run Tests with JVM Flags
  test-with-flags:
    runs-on: ubuntu-latest
    needs: generate-report
    timeout-minutes: 30
    strategy:
      matrix:
        jvm_flags:
          - "-ea"
          - "-Xmx2G"
          - "-XX:+PrintCompilation"
          - "-XX:+UseG1GC"
          - "-XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Compile with Maven
        run: ./mvnw clean compile

      - name: Group Start for JVM Flag Test
        run: echo "::group::Running Tests with JVM Flag '${{ matrix.jvm_flags }}'"

      - name: Run Tests with JVM Flag
        run: ./mvnw clean test -DargLine="${{ matrix.jvm_flags }}" -Djava.awt.headless=true

      - name: Verify JaCoCo Report
        run: |
          if [ ! -f target/site/jacoco/index.html ]; then
            echo "JaCoCo report not found. Generating the report."
            ./mvnw jacoco:report
          else
            echo "JaCoCo report already exists. Skipping generation."
          fi

      - name: Group End for JVM Flag Test
        run: echo "::endgroup::"

  # Step 3: Extract Coverage
  extract-coverage:
    needs: [generate-report, test-with-flags]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download JaCoCo Report
        uses: actions/download-artifact@v4
        with:
          name: jacoco-report

      - name: Extract Coverage
        run: python3 config/coverage.py target/site/jacoco/jacoco.csv

      - name: Display Coverage Summary
        run: |
          echo "Coverage extracted successfully."

  # Step 4: Package and Deploy
  package:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - uses: actions/download-artifact@v4
        with:
          name: jar

      - name: Check files
        run: ls -l target/package/

      - name: Build installation package
        shell: bash
        run: |
          set -x
          set -o pipefail
          APP_VERSION=$(ls -1 target/package/Makelangelo-*-with-dependencies.jar | sed "s/.*Makelangelo-\([^-]*\)-with-dependencies.jar/\1/") &&
          sed -i.bak "s/\(--app-version\).*/\1 $APP_VERSION/" src/main/package/jpackage.cfg &&
          jpackage "@src/main/package/jpackage.cfg" "@src/main/package/jpackage-${{matrix.os}}.cfg" --main-jar "Makelangelo-$APP_VERSION-with-dependencies.jar" &&
          ls &&
          BINARY=$(find . -maxdepth 1 -iname 'makelangelo*' | grep -E '(msi$|dmg$|deb$)' | sed "s,./,," | head -1) &&
          BINARY_NIGHTLY=$(echo $BINARY | sed 's/[Mm]akelangelo\(.*\)\.\(.*\)/Makelangelo-nightly-$$.\2/') &&
          echo "BINARY=$BINARY" | tee -a $GITHUB_ENV &&
          echo "BINARY_NIGHTLY=$BINARY_NIGHTLY" | tee -a $GITHUB_ENV

      - name: Deploy installation release
        uses: WebFreak001/deploy-nightly@v3.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ env.UPLOAD_URL }}
          release_id: ${{ env.RELEASE_ID }}
          asset_path: ${{ env.BINARY }}
          asset_name: ${{ env.BINARY_NIGHTLY }}
          asset_content_type: application/zip
          max_releases: 1

      - name: Upload artifact for testing purpose
        uses: actions/upload-artifact@v4.3.3
        with:
          name: ${{ env.BINARY }}
          retention-days: 2
          path: ${{ env.BINARY }}
